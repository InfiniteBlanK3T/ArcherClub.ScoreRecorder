// <auto-generated />
using System;
using BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(BackEndContext))]
    [Migration("20230524061111_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEnd.Models.Archers", b =>
                {
                    b.Property<int>("ArcherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArcherId"));

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ArcherId");

                    b.ToTable("Archers");
                });

            modelBuilder.Entity("BackEnd.Models.Clubs", b =>
                {
                    b.Property<string>("ClubName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClubGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("ClubMaxedAge")
                        .HasColumnType("int");

                    b.HasKey("ClubName");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("BackEnd.Models.Distances", b =>
                {
                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.HasKey("Distance");

                    b.ToTable("Distances");
                });

            modelBuilder.Entity("BackEnd.Models.Ends", b =>
                {
                    b.Property<int>("EndID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EndID"));

                    b.Property<int>("ArrowScore1")
                        .HasColumnType("int");

                    b.Property<int>("ArrowScore2")
                        .HasColumnType("int");

                    b.Property<int>("ArrowScore3")
                        .HasColumnType("int");

                    b.Property<int>("ArrowScore4")
                        .HasColumnType("int");

                    b.Property<int>("ArrowScore5")
                        .HasColumnType("int");

                    b.Property<int>("ArrowScore6")
                        .HasColumnType("int");

                    b.Property<int>("RangeID")
                        .HasColumnType("int");

                    b.Property<int>("RoundScoreID")
                        .HasColumnType("int");

                    b.HasKey("EndID");

                    b.HasIndex("RangeID");

                    b.HasIndex("RoundScoreID");

                    b.ToTable("Ends");
                });

            modelBuilder.Entity("BackEnd.Models.Equipments", b =>
                {
                    b.Property<string>("EquipmentID")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EquipmentID");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("BackEnd.Models.EquivalentRounds", b =>
                {
                    b.Property<string>("EquivalentRound")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfEndsPerRange")
                        .HasColumnType("int");

                    b.HasKey("EquivalentRound");

                    b.ToTable("EquivalentRounds");
                });

            modelBuilder.Entity("BackEnd.Models.Events", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EventID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BackEnd.Models.FaceSizes", b =>
                {
                    b.Property<int>("FaceSize")
                        .HasColumnType("int");

                    b.HasKey("FaceSize");

                    b.ToTable("FaceSizes");
                });

            modelBuilder.Entity("BackEnd.Models.MultiEvent", b =>
                {
                    b.Property<int>("MultiEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MultiEventID"));

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("RoundID")
                        .HasColumnType("int");

                    b.HasKey("MultiEventID");

                    b.HasIndex("ClubName");

                    b.HasIndex("EventID");

                    b.HasIndex("RoundID");

                    b.ToTable("MultiEvent");
                });

            modelBuilder.Entity("BackEnd.Models.Ranges", b =>
                {
                    b.Property<int>("RangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RangeID"));

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("FaceSize")
                        .HasColumnType("int");

                    b.HasKey("RangeID");

                    b.HasIndex("Distance");

                    b.HasIndex("FaceSize");

                    b.ToTable("Ranges");
                });

            modelBuilder.Entity("BackEnd.Models.RoundGroups", b =>
                {
                    b.Property<int>("RoundGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoundGroupId"));

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EquipmentID")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.HasKey("RoundGroupId");

                    b.HasIndex("ClubName");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundGroups");
                });

            modelBuilder.Entity("BackEnd.Models.RoundRangeMapping", b =>
                {
                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RangeID")
                        .HasColumnType("int");

                    b.HasKey("RoundId", "RangeID");

                    b.HasIndex("RangeID");

                    b.ToTable("RoundRangeMapping");
                });

            modelBuilder.Entity("BackEnd.Models.RoundScore", b =>
                {
                    b.Property<int>("RoundScoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoundScoreID"));

                    b.Property<int>("ArcherID")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EquipmentsEquipmentID")
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RoundDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoundID")
                        .HasColumnType("int");

                    b.HasKey("RoundScoreID");

                    b.HasIndex("ArcherID");

                    b.HasIndex("EquipmentsEquipmentID");

                    b.HasIndex("EventID");

                    b.HasIndex("RoundID");

                    b.ToTable("RoundScore");
                });

            modelBuilder.Entity("BackEnd.Models.Rounds", b =>
                {
                    b.Property<int>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoundId"));

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoundEquivalent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoundId");

                    b.HasIndex("ClubName");

                    b.HasIndex("RoundEquivalent");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("BackEnd.Models.Ends", b =>
                {
                    b.HasOne("BackEnd.Models.Ranges", "Ranges")
                        .WithMany()
                        .HasForeignKey("RangeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.RoundScore", "RoundScores")
                        .WithMany()
                        .HasForeignKey("RoundScoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranges");

                    b.Navigation("RoundScores");
                });

            modelBuilder.Entity("BackEnd.Models.MultiEvent", b =>
                {
                    b.HasOne("BackEnd.Models.Clubs", "Clubs")
                        .WithMany()
                        .HasForeignKey("ClubName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Events", "Events")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Rounds", "Rounds")
                        .WithMany()
                        .HasForeignKey("RoundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clubs");

                    b.Navigation("Events");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("BackEnd.Models.Ranges", b =>
                {
                    b.HasOne("BackEnd.Models.Distances", "Distances")
                        .WithMany()
                        .HasForeignKey("Distance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.FaceSizes", "FaceSizes")
                        .WithMany()
                        .HasForeignKey("FaceSize")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Distances");

                    b.Navigation("FaceSizes");
                });

            modelBuilder.Entity("BackEnd.Models.RoundGroups", b =>
                {
                    b.HasOne("BackEnd.Models.Clubs", "Clubs")
                        .WithMany()
                        .HasForeignKey("ClubName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Equipments", "Equipments")
                        .WithMany()
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Rounds", "Rounds")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clubs");

                    b.Navigation("Equipments");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("BackEnd.Models.RoundRangeMapping", b =>
                {
                    b.HasOne("BackEnd.Models.Ranges", "Ranges")
                        .WithMany()
                        .HasForeignKey("RangeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Rounds", "Rounds")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranges");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("BackEnd.Models.RoundScore", b =>
                {
                    b.HasOne("BackEnd.Models.Archers", "Archers")
                        .WithMany()
                        .HasForeignKey("ArcherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Equipments", "Equipments")
                        .WithMany()
                        .HasForeignKey("EquipmentsEquipmentID");

                    b.HasOne("BackEnd.Models.Events", "Events")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Rounds", "Rounds")
                        .WithMany()
                        .HasForeignKey("RoundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Archers");

                    b.Navigation("Equipments");

                    b.Navigation("Events");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("BackEnd.Models.Rounds", b =>
                {
                    b.HasOne("BackEnd.Models.Clubs", "Clubs")
                        .WithMany()
                        .HasForeignKey("ClubName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.EquivalentRounds", "EquivalentRounds")
                        .WithMany()
                        .HasForeignKey("RoundEquivalent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clubs");

                    b.Navigation("EquivalentRounds");
                });
#pragma warning restore 612, 618
        }
    }
}
